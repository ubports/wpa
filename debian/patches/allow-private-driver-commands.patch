From d56e18b7870ae18ba5296c0a6779098b6e06ba07 Mon Sep 17 00:00:00 2001
From: Simon Fels <simon.fels@canonical.com>
Date: Tue, 23 Feb 2016 09:56:33 +0100
Subject: [PATCH] Allow us to issue private driver commands by using libwifi

---
 src/drivers/driver.h                    |  4 +-
 src/drivers/driver_nl80211.c            | 93 +++++++++++++++++++++++++++++++--
 src/drivers/driver_nl80211.h            |  2 -
 wpa_supplicant/ctrl_iface.c             | 10 ++--
 wpa_supplicant/dbus/dbus_new.c          | 10 ++++
 wpa_supplicant/dbus/dbus_new_handlers.c | 35 +++++++++++++
 wpa_supplicant/driver_i.h               |  4 +-
 7 files changed, 143 insertions(+), 15 deletions(-)

Index: wpa/src/drivers/driver.h
===================================================================
--- wpa.orig/src/drivers/driver.h
+++ wpa/src/drivers/driver.h
@@ -2846,7 +2846,7 @@ struct wpa_driver_ops {
 	 */
 	int (*set_authmode)(void *priv, int authmode);
 
-#ifdef ANDROID
+#ifdef CONFIG_ANDROID_HAL
 	/**
 	 * driver_cmd - Execute driver-specific command
 	 * @priv: Private driver interface data
@@ -2856,7 +2856,7 @@ struct wpa_driver_ops {
 	 * Returns: 0 on success, -1 on failure
 	 */
 	int (*driver_cmd)(void *priv, char *cmd, char *buf, size_t buf_len);
-#endif /* ANDROID */
+#endif /* CONFIG_ANDROID_HAL */
 
 	/**
 	 * vendor_cmd - Execute vendor specific command
Index: wpa/src/drivers/driver_nl80211.c
===================================================================
--- wpa.orig/src/drivers/driver_nl80211.c
+++ wpa/src/drivers/driver_nl80211.c
@@ -22,6 +22,7 @@
 #include <linux/rtnetlink.h>
 #include <netpacket/packet.h>
 #include <linux/errqueue.h>
+#include <dlfcn.h>
 
 #include "common.h"
 #include "eloop.h"
@@ -37,7 +38,7 @@
 #include "radiotap_iter.h"
 #include "rfkill.h"
 #include "driver_nl80211.h"
-
+#include "../wpa_supplicant/wpa_supplicant_i.h"
 
 #ifndef CONFIG_LIBNL20
 /*
@@ -8430,6 +8431,108 @@ static int wpa_driver_do_acs(void *priv,
 	return ret;
 }
 
+#ifdef CONFIG_ANDROID_HAL
+
+static void wpa_driver_notify_country_change(void *ctx, char *cmd)
+{
+	if ((os_strncasecmp(cmd, "COUNTRY", 7) == 0) ||
+	    (os_strncasecmp(cmd, "SETBAND", 7) == 0)) {
+		union wpa_event_data event;
+
+		os_memset(&event, 0, sizeof(event));
+		event.channel_list_changed.initiator = REGDOM_SET_BY_USER;
+		if (os_strncasecmp(cmd, "COUNTRY", 7) == 0) {
+			event.channel_list_changed.type = REGDOM_TYPE_COUNTRY;
+			if (os_strlen(cmd) > 9) {
+				event.channel_list_changed.alpha2[0] = cmd[8];
+				event.channel_list_changed.alpha2[1] = cmd[9];
+			}
+		} else {
+			event.channel_list_changed.type = REGDOM_TYPE_UNKNOWN;
+		}
+		wpa_supplicant_event(ctx, EVENT_CHANNEL_LIST_CHANGED, &event);
+	}
+}
+
+#define LIBWIFI_SONAME				"libwifi.so.1"
+#define LIBWIFI_SYM_COMPAT_CHECK_AVAILABILITY	"wifi_compat_check_availability"
+#define LIBWIFI_SYM_SEND_DRIVER_COMMAND		"wifi_send_driver_command"
+
+int wpa_driver_nl80211_driver_cmd(void *priv, char *cmd, char *buf,
+				  size_t buf_len)
+{
+	static void *libwifi = NULL;
+	static int (*wifi_compat_check_availability)();
+	static int (*wifi_send_driver_command)(char *ifname, char *cmd,
+					       char *buf, size_t buf_len);
+
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	int res;
+
+	if (!libwifi) {
+		libwifi = dlopen(LIBWIFI_SONAME, RTLD_LAZY);
+		if (!libwifi)
+			return -EIO;
+
+		*(void**) (&wifi_compat_check_availability) =
+			dlsym(libwifi, LIBWIFI_SYM_COMPAT_CHECK_AVAILABILITY);
+		*(void**) (&wifi_send_driver_command) =
+			dlsym(libwifi, LIBWIFI_SYM_SEND_DRIVER_COMMAND);
+
+		if (!wifi_compat_check_availability ||
+		    !wifi_send_driver_command) {
+			wpa_printf(MSG_ERROR,
+				   "nl80211: Failed to load symbols from %s",
+				   LIBWIFI_SONAME);
+			return -EIO;
+		}
+
+		wpa_printf(MSG_DEBUG,
+			   "nl80211: Successfully loaded symbols from %s",
+			   LIBWIFI_SONAME);
+	}
+
+	if (!(*wifi_compat_check_availability)()) {
+		wpa_printf(MSG_WARNING,
+			   "nl80211: WiFi compat layer is not available");
+		return -EIO;
+	}
+
+	if (bss->ifindex <= 0 && bss->wdev_id > 0) {
+		/* DRIVER CMD received on the DEDICATED P2P Interface which
+		 * doesn't have an NETDEVICE associated with it. So we have to
+		 * re-route the command to the parent NETDEVICE.
+		 */
+		struct wpa_supplicant *wpa_s =
+			(struct wpa_supplicant *)(drv->ctx);
+
+		wpa_printf(MSG_DEBUG, "Re-routing DRIVER cmd to parent iface");
+		if (wpa_s && wpa_s->parent) {
+			/* Update the nl80211 pointers to parent iface */
+			bss = wpa_s->parent->drv_priv;
+			drv = bss->drv;
+			wpa_printf(MSG_DEBUG, "Re-routing command to iface: %s"
+					      " cmd (%s)", bss->ifname, cmd);
+		}
+	}
+
+	wpa_printf(MSG_DEBUG,
+		   "nl80211: Sending command %s to %s", cmd, bss->ifname);
+	res = (*wifi_send_driver_command)(bss->ifname, cmd, buf, buf_len);
+	if (res < 0) {
+		wpa_printf(MSG_WARNING,
+			   "nl80211: Error %d when sending %s to %s",
+			   res, cmd, bss->ifname);
+		return res;
+	}
+
+	wpa_driver_notify_country_change(drv->ctx, cmd);
+
+	return 0;
+}
+
+#endif
 
 const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.name = "nl80211",
@@ -8517,9 +8620,9 @@ const struct wpa_driver_ops wpa_driver_n
 	.get_noa = wpa_driver_get_p2p_noa,
 	.set_ap_wps_ie = wpa_driver_set_ap_wps_p2p_ie,
 #endif /* ANDROID_P2P */
-#ifdef ANDROID
+#ifdef CONFIG_ANDROID_HAL
 	.driver_cmd = wpa_driver_nl80211_driver_cmd,
-#endif /* ANDROID */
+#endif /* CONFIG_ANDROID_HAL */
 	.vendor_cmd = nl80211_vendor_cmd,
 	.set_qos_map = nl80211_set_qos_map,
 	.set_wowlan = nl80211_set_wowlan,
Index: wpa/src/drivers/driver_nl80211.h
===================================================================
--- wpa.orig/src/drivers/driver_nl80211.h
+++ wpa/src/drivers/driver_nl80211.h
@@ -236,8 +236,6 @@ int android_genl_ctrl_resolve(struct nl_
 int android_pno_start(struct i802_bss *bss,
 		      struct wpa_driver_scan_params *params);
 int android_pno_stop(struct i802_bss *bss);
-extern int wpa_driver_nl80211_driver_cmd(void *priv, char *cmd, char *buf,
-					 size_t buf_len);
 
 #ifdef ANDROID_P2P
 int wpa_driver_set_p2p_noa(void *priv, u8 count, int start, int duration);
Index: wpa/wpa_supplicant/ctrl_iface.c
===================================================================
--- wpa.orig/wpa_supplicant/ctrl_iface.c
+++ wpa/wpa_supplicant/ctrl_iface.c
@@ -6497,8 +6497,7 @@ static int wpa_supplicant_pktcnt_poll(st
 	return ret;
 }
 
-
-#ifdef ANDROID
+#ifdef CONFIG_ANDROID_HAL
 static int wpa_supplicant_driver_cmd(struct wpa_supplicant *wpa_s, char *cmd,
 				     char *buf, size_t buflen)
 {
@@ -6522,8 +6521,7 @@ static int wpa_supplicant_driver_cmd(str
 	}
 	return ret;
 }
-#endif /* ANDROID */
-
+#endif /* CONFIG_ANDROID_HAL */
 
 static int wpa_supplicant_vendor_cmd(struct wpa_supplicant *wpa_s, char *cmd,
 				     char *buf, size_t buflen)
@@ -8392,11 +8390,11 @@ char * wpa_supplicant_ctrl_iface_process
 		if (wpa_supplicant_ctrl_iface_autoscan(wpa_s, buf + 9))
 			reply_len = -1;
 #endif /* CONFIG_AUTOSCAN */
-#ifdef ANDROID
+#ifdef CONFIG_ANDROID_HAL
 	} else if (os_strncmp(buf, "DRIVER ", 7) == 0) {
 		reply_len = wpa_supplicant_driver_cmd(wpa_s, buf + 7, reply,
 						      reply_size);
-#endif /* ANDROID */
+#endif /* CONFIG_ANDROID_HAL */
 	} else if (os_strncmp(buf, "VENDOR ", 7) == 0) {
 		reply_len = wpa_supplicant_vendor_cmd(wpa_s, buf + 7, reply,
 						      reply_size);
Index: wpa/wpa_supplicant/dbus/dbus_new.c
===================================================================
--- wpa.orig/wpa_supplicant/dbus/dbus_new.c
+++ wpa/wpa_supplicant/dbus/dbus_new.c
@@ -2772,6 +2772,16 @@ static const struct wpa_dbus_method_desc
 		  END_ARGS
 	  }
 	},
+#ifdef CONFIG_ANDROID_HAL
+	{ "SendDriverCommand", WPAS_DBUS_NEW_IFACE_INTERFACE,
+	  (WPADBusMethodHandler)
+	  wpas_dbus_handler_send_driver_command,
+	  {
+		  { "cmd", "s", ARG_IN },
+		  { "result", "s", ARG_OUT},
+	  }
+	},
+#endif
 #ifdef CONFIG_WPS
 	{ "Start", WPAS_DBUS_NEW_IFACE_WPS,
 	  (WPADBusMethodHandler) wpas_dbus_handler_wps_start,
Index: wpa/wpa_supplicant/dbus/dbus_new_handlers.c
===================================================================
--- wpa.orig/wpa_supplicant/dbus/dbus_new_handlers.c
+++ wpa/wpa_supplicant/dbus/dbus_new_handlers.c
@@ -647,9 +647,7 @@ oom:
 DBusMessage * wpas_dbus_handler_set_interface_firmware(DBusMessage *message,
 						       struct wpa_global *global)
 {
-	DBusMessageIter iter_dict;
 	DBusMessage *reply = NULL;
-	DBusMessageIter iter;
 	void *libwifi;
 	const char *iface, *firmware, *path;
 	int res = 0;
@@ -2347,6 +2345,42 @@ DBusMessage * wpas_dbus_handler_set_pkcs
 	return NULL;
 }
 
+#ifdef CONFIG_ANDROID_HAL
+
+#define DRIVER_COMMAND_RESPONSE_SIZE		1024
+
+DBusMessage * wpas_dbus_handler_send_driver_command(DBusMessage *message,
+	struct wpa_supplicant *wpa_s)
+{
+	DBusMessageIter iter;
+	DBusMessage *reply;
+	char *cmd = NULL;
+	char response[DRIVER_COMMAND_RESPONSE_SIZE];
+	int ret;
+
+	dbus_message_iter_init(message, &iter);
+	dbus_message_iter_get_basic(&iter, &cmd);
+	if (cmd == NULL) {
+		return dbus_message_new_error(
+			message, DBUS_ERROR_INVALID_ARGS,
+			"No command supplied");
+	}
+
+	ret = wpa_driver_nl80211_driver_cmd(wpa_s, cmd,
+		response, DRIVER_COMMAND_RESPONSE_SIZE);
+	if (ret < 0) {
+		return dbus_message_new_error(
+				message, DBUS_ERROR_INVALID_ARGS,
+				"Failed to send command to the driver");
+	}
+
+	reply = dbus_message_new_method_return(message);
+	dbus_message_append_args(reply, DBUS_TYPE_STRING,
+				 &response, DBUS_TYPE_INVALID);
+	return reply;
+}
+
+#endif /* CONFIG_ANDROID_HAL */
 
 /**
  * wpas_dbus_getter_capabilities - Return interface capabilities
Index: wpa/wpa_supplicant/driver_i.h
===================================================================
--- wpa.orig/wpa_supplicant/driver_i.h
+++ wpa/wpa_supplicant/driver_i.h
@@ -558,7 +558,7 @@ static inline int wpa_drv_tdls_oper(stru
 	return wpa_s->driver->tdls_oper(wpa_s->drv_priv, oper, peer);
 }
 
-#ifdef ANDROID
+#ifdef CONFIG_ANDROID_HAL
 static inline int wpa_drv_driver_cmd(struct wpa_supplicant *wpa_s,
 				     char *cmd, char *buf, size_t buf_len)
 {
@@ -566,7 +566,7 @@ static inline int wpa_drv_driver_cmd(str
 		return -1;
 	return wpa_s->driver->driver_cmd(wpa_s->drv_priv, cmd, buf, buf_len);
 }
-#endif /* ANDROID */
+#endif /* CONFIG_ANDROID_HAL */
 
 static inline void wpa_drv_set_rekey_info(struct wpa_supplicant *wpa_s,
 					  const u8 *kek, size_t kek_len,
Index: wpa/wpa_supplicant/dbus/dbus_new_handlers.h
===================================================================
--- wpa.orig/wpa_supplicant/dbus/dbus_new_handlers.h
+++ wpa/wpa_supplicant/dbus/dbus_new_handlers.h
@@ -365,4 +365,9 @@ DBusMessage * wpas_dbus_handler_subscrib
 DBusMessage * wpas_dbus_handler_unsubscribe_preq(
 	DBusMessage *message, struct wpa_supplicant *wpa_s);
 
+#ifdef CONFIG_ANDROID_HAL
+DBusMessage * wpas_dbus_handler_send_driver_command(DBusMessage *message,
+       struct wpa_supplicant *wpa_s);
+#endif
+
 #endif /* CTRL_IFACE_DBUS_HANDLERS_NEW_H */
